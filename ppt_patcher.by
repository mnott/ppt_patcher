#!/usr/bin/env bython
# encoding: utf-8
r"""

Take a PowerPoint file and replace images by other images.

The only condition is that you need to set the alt text
within PowerPoint for the images that you want to replace,
by the name of the new image files.

# Introduction

Just use

```
./ppt_patcher.py --help
```

to understand the different commands; the main command is
`patchslides`, so you can do

```
./ppt_patcher.py patchslides --help
```

for more information.


# Principle

PowerPoint allows to set an Alt-Text for an image. Just
right-click on the image, and find the menu entry
`View Alt Text ...`

This opens a text entry field into which you put a path
to the image you want to replace it with. For example,
consider something like

```
manual/forecast.png
```

If you then start the program like this:

```
./ppt_patcher.py patchslides --input template.pptx \
                             --outfile output.pptx \
                             --images my_images
```

each image in the file template.pptx that you have
annotated via its alt text with `manual/forecast.png`
will be replaced by `my_images/manual/forecast.png`.

The default value of the `images` parameter is just
the current directory.

# Prerequisites

The default Python pptx module does not support the
alt text. For this reason, you need to patch it:
look at the `prereqs` directory; it contains a
`patch.sh` shell script and a patch directory.
Copy both patch.sh and the patch directory into
whereever your python virtual environment is that
you are currently using. Go into that directory and
call `patch.sh` (for this, the pptx module needs to
be installed). If you patch twice, the script will
offer you to unpatch. Alternatively, use setup.sh.

"""

import typer
import collections
import collections.abc
import pptx
import os


#
# Print the images on all slides
#
def list_slide_images(prs, aslide=-1) {
	slides = prs.slides;
	for slide in prs.slides {
		if slides.index(slide) == aslide-1 or aslide == -1 {
			print('slide number ', slides.index(slide)+1)
			for shape in slide.shapes {
				if shape.shape_type == 13 {
					print('id: %s, height: %s, width: %s, left: %s'%(
							shape.shape_id,
							round(shape.height.inches,2),
							round(shape.width.inches,2),
							round(shape.left.inches,2)
						),
					shape.shape_type,
					shape.name,
					shape.alt_text
					);
				}
			}
		}
	}
}

#
# Patch the images on all slides
#
def patch_slide_images(prs, output, images, aslide=-1) {
	#
	# Iterate over all slides and identify images
	#
	slides = prs.slides
	for slide in prs.slides {
		if slides.index(slide) == aslide-1 or aslide == -1 {
			for shape in slide.shapes {
				if shape.shape_type == 13 {
					if shape.alt_text {
						file = images+"/"+shape.alt_text;
						if file and os.path.exists(file) {
							print ("Updating: ", file);
							img = pptx.parts.image.Image.from_file(file);
							slide_part, rId = shape.part, shape._element.blip_rId;
							image_part = slide_part.related_part(rId);
							image_part.blob = img._blob;
						}
					}
				}
			}
		}
	}
	#
	# Save the File
	#
	prs.save(output)
}


#
# Command Line Interface
#
app = typer.Typer(add_completion=False);
state = dict(); state{"verbose"} = False;



#
# Command: List all slides from a PPT
#
@app.command()
def listslides (
	infile: str  = typer.Option("input.pptx", help="Input Filename"),
	slide: int = typer.Option("-1", help="Slide to list (-1 for all)")
) {
	"""
	List the Slides and show information about their images.
	"""
	prs = pptx.Presentation(infile);
	list_slide_images(prs, slide);
}




#
# Command: Replace Images
#
@app.command()
def patchslides (
	infile:  str  = typer.Option("input.pptx", help="Input Filename"),
	outfile: str  = typer.Option("output.pptx", help="Output Filename"),
	images:  str  = typer.Option(".", help="PNG path prefix"),
	slide:   int  = typer.Option("-1", help="Slide to Patch (-1 for all)")
) {
	"""
	Replace images in PowerPoint slides.
	"""
	prs = pptx.Presentation(infile);
	patch_slide_images(prs, outfile, images, slide);
}


#
# Command: Replace Images
#
@app.command()
def patchslides (
	infile:  str  = typer.Option("input.pptx", help="Input Filename"),
	outfile: str  = typer.Option("output.pptx", help="Output Filename"),
	images:  str  = typer.Option(".", help="PNG path prefix"),
	slide:   int  = typer.Option("-1", help="Slide to Patch (-1 for all)")
) {
	"""
	Replace images in PowerPoint slides.
	"""
	prs = pptx.Presentation(infile);
	patch_slide_images(prs, outfile, images, slide);
}


#
# Command: Doc
#
@app.command()
def doc (
	title: str = typer.Option("PPT Patcher", help="Doc Title"),
	toc: bool  = typer.Option(True, help="With TOC")
	) {
	"""
	Re-create the documentation.

	Use like

		./ppt_patcher.py doc >README.md
	"""
	import importlib;
	import os;
	import doc2md;
	mod_name = os.path.basename(__file__);
	if mod_name.endswith('.py') {
		mod_name = mod_name.rsplit('.py', 1)[0];
	}
	atitle = title or mod_name.replace('_', '-');
	module = importlib.import_module(mod_name);
	docstr = module.__doc__;
	result = doc2md.doc2md(docstr, atitle, toc=toc, min_level=0);
	print (result);
}


#
# Default behavior with or without being
# called from the IDE: Set the IDE environment
# variable to something.
#
@app.callback(invoke_without_command=True)
def main(
	ctx: typer.Context,
	ide: str = typer.Option(None, envvar="IDE"),
) {
	if ide {
		#listslides("input.pptx", 1);
		#patchslides("template.pptx", "output.pptx", "graphs", -1);
		doc("PPT Patcher", toc=False);
	}
}


#
# Call app Function
#
if __name__ == "__main__" {
	try {
		app();
	}
	except SystemExit as e {
		if e.code != 0 {
			raise;
		}
	}
}
